// nextflow.config

/* process {
  resourceLimits = [
    cpus: 16,
    memory: 64.GB,
    time: 8.h
  ]
}

process {
    // Define the error strategy
    errorStrategy = 'retry'
    maxRetries    = 2
    maxErrors     = '-1'

    // General resource requirements
    queue         = 'low'
    cpus          = { 1 * task.attempt }
    memory        = { 8.GB * task.attempt }
    time          = { 4.h * task.attempt }

    // Process-specific resource requirements
    withLabel: process_single {
        queue  = 'low'
        cpus   = 1
        memory = { 8.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_low {
        queue  = 'low'
        cpus   = { 1 * task.attempt }
        memory = { 8.GB * task.attempt }
        time   = { 4.h * task.attempt }
    }
    withLabel: process_medium {
        queue  = 'low'
        cpus   = { 8 * task.attempt }
        memory = { 32.GB * task.attempt }
    }
}

executor {
    name              = 'slurm'
    queueStatInterval = '100 sec'
    pollInterval      = '10 sec'
} */


params {
    // Reference and FASTQ file paths
    samplesheet = "/Users/tomroberts/Documents/Oxford_DPhil/first_rotation/pipeline_devel/samplesheet.csv"
    primary_contigs = [ 
        [
            [sample_id:"FUP_H-meg-r1-FV", reference:"/well/band/projects/pfsa/data/assemblies/Pf3D7_v3/Pf3D7_v3.fasta"],
             "/well/band/users/sqy262/assembly_pipeline/primary_contigs/FUP_H-meg-r1-FV.bp.p_ctg.gfa"
        ], 
        [
            [sample_id:"FUP_H-shk-r1-2x", reference:"/well/band/projects/pfsa/data/assemblies/Pf3D7_v3/Pf3D7_v3.fasta"],
            "/well/band/users/sqy262/assembly_pipeline/primary_contigs/FUP_H-shk-r1-2x.bp.p_ctg.gfa"
        ],
        [
            [sample_id:"FUP_H-shk-r1-FV", reference:"/well/band/projects/pfsa/data/assemblies/Pf3D7_v3/Pf3D7_v3.fasta"],
            "/well/band/users/sqy262/assembly_pipeline/primary_contigs/FUP_H-shk-r1-FV.bp.p_ctg.gfa"
        ]
    ]    
    hifi = true
    nanopore = false
    
    //dockerImage = 'ngs_pipeline' // Docker image name
}

process {
    withName: 'CREATE_BAM' {
        publishDir = [
            path: { "${projectDir}/results/03_READS_ALIGNED" },
            mode: 'copy'
        ]
    }
    
    withName: 'CREATE_BAM_CONTIGS' {
        publishDir = [
            path: { "${projectDir}/results/05_ORIENTED_CONTIGS_ALIGNED" },
            mode: 'copy'
        ]
    }
}


/* process {
     //Default process configuration
     withLabel: '.*' {
        container = params.dockerImage
    }
} */


